//
// Finds MD files that are not in the TOC.
// They might still be used, for example, if you use autogenerated TOC sections.
// Set the PATH_DOCS_REPO in your environment to point to the repo on your computer.
//
const fs = require('fs');
const path = require('path');

const scriptDir = __dirname;
const PATH_DOCS = path.join(scriptDir, '..');

if (!PATH_DOCS) {
  console.error(
    'Please provide a documentation folder path using the PATH_DOCS environment variable.',
  );
  process.exit(1);
}

const PATH_SIDEBAR_TS = path.join(PATH_DOCS, 'sidebars.ts');

if (!fs.existsSync(PATH_SIDEBAR_TS)) {
  console.error(
    `Error: The file specified in ${PATH_SIDEBAR_TS} does not exist.`,
  );
  process.exit(1);
}

const sidebarContent = fs.readFileSync(PATH_SIDEBAR_TS, 'utf8');
const ids = extractIds(sidebarContent);

const files = {};
const DOCS_FOLDER = path.join(PATH_DOCS, 'docs');
browseDocsFolder(DOCS_FOLDER);

// Compare ids array and files dictionary
const MDFilesNotInTOC = Object.keys(files).filter(
  (file) => files[file] === '.md' && !ids.includes(file),
);

console.log(
  `Markdown files not in TOC: ${MDFilesNotInTOC.length}`,
  MDFilesNotInTOC,
);

// Function to extract 'id' properties
function extractIds(sidebarContent) {
  const idRegex = /id:\s*['"](.*?)['"]/g;
  const additionalPatternRegex1 = /^\s+'(.*?)'/gm;
  const additionalPatternRegex2 = /^\s+items:\s+\['(.*?)'\],/gm;

  const extractedIds = [];

  function extract(regex) {
    let match;
    while ((match = regex.exec(sidebarContent)) !== null) {
      extractedIds.push(match[1]);
    }
  }

  extract(idRegex);
  extract(additionalPatternRegex1);
  extract(additionalPatternRegex2);

  return extractedIds;
}

function browseDocsFolder(folderPath) {
  const items = fs.readdirSync(folderPath);

  items.forEach((item) => {
    const fullPath = path.join(folderPath, item);
    const relativePath = path.relative(DOCS_FOLDER, fullPath);
    const extension = path.extname(item);

    if (fs.statSync(fullPath).isDirectory()) {
      browseDocsFolder(fullPath);
    } else {
      files[relativePath.replace(/\\/g, '/').replace(/\.md$/, '')] = extension;
    }
  });
}
